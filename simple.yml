---
Description: A simple stack with one EC2 instance in its own VPC.
Parameters:
  VpcName:
    Description: The name of the VPC.
    Type: String
    MinLength: 1
    Default: simple_vpc
  SimpleInstanceType:
    Description: The instance type of the EC2 node running the OpenVPN server.
    Type: String
    Default: t2.micro
  SimpleCidrPrefixVpc:
    Description: Starting portion of VPC network CIDR block.
    Type: String
    Default: '10.2'
    AllowedValues:
      - '10.2'
      - '172.18'
  KeyPairName:
    Description: Key pair for SSHing to OpenVPN EC2 instance.
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: west-1-chmreid-openvpn

Mappings:
  RegionMap:
    us-east-1:  # Northern Virginia
      "ubuntu": "ami-0bcc094591f354be2"  # Ubuntu Server Linux AMI 2018.04-20200810
    us-east-2:  # Ohio
      "ubuntu": "ami-0bbe28eb2173f6167"  # Ubuntu Server Linux AMI 2018.04-20200810
    us-west-1:  # Northern California
      "ubuntu": "ami-0dd005d3eb03f66e8"  # Ubuntu Server Linux AMI 2018.04-20200810
    us-west-2:  # Oregon
      "ubuntu": "ami-0a634ae95e11c6f91"  # Ubuntu Server Linux AMI 2018.04-20200810

Resources:
  SimpleVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '${SimpleCidrPrefixVpc}.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default

  SimplePublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SimpleVpc
      CidrBlock: !Sub '${SimpleCidrPrefixVpc}.0.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone:
         Fn::Select:
           - 0
           - Fn::GetAZs: !Ref AWS::Region

  SimpleInternetGateway:
    Type: "AWS::EC2::InternetGateway"

  SimpleRTPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref SimpleVpc

  SimpleAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SimpleVpc
      InternetGatewayId: !Ref SimpleInternetGateway

  SimpleRouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: SimpleInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SimpleInternetGateway
      RouteTableId: !Ref SimpleRTPublic

  SimplePublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SimplePublicSubnet
      RouteTableId: !Ref SimpleRTPublic

  SimpleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for OpenVPN Server
      VpcId: !Ref SimpleVpc
      SecurityGroupIngress:
        # Allow pings
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        # Allow ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  SimpleEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: EC2LogsRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  SimpleAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SimpleAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Grant VPN EC2 permission to associate with an Elastic IP
          - Action:
              - ec2:AssociateAddress
              - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
      Roles:
        - !Ref SimpleEC2InstanceRole

  SimpleEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SimpleEC2InstanceRole

  SimpleControlIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SimplePublicSubnet
      PrivateIpAddress: !Sub '${SimpleCidrPrefixVpc}.0.10'
      Description: Management Interface
      GroupSet:
        - !Ref SimpleSG
      SourceDestCheck: true

  SimpleEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
      - RegionMap
      - !Ref "AWS::Region"
      - ubuntu
      InstanceType: !Ref SimpleInstanceType
      SourceDestCheck: false
      KeyName: !Ref 'KeyPairName'
      # Note: security groups are attached to the net iface
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref SimpleControlIface
        DeviceIndex: 0
      IamInstanceProfile: !Ref SimpleEC2InstanceProfile
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 20
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
          dpkg -i /tmp/amazon-cloudwatch-agent.deb
          apt-get update
          apt-get -y upgrade
          apt-get -y install python-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sysctl -p
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource SimpleEC2Instance --configsets initsetup,falcosetup --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SimpleEC2Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          initsetup:
            - "install_software"
            - "setup_cfn_hup"
            - "config_cw_agent"
            - "restart_cw_agent"
          falcosetup:
            - "install_falco"
            - "configure_falco"
            - "start_falco"
            - "restart_cw_after_falco"
          cw_agent_update_environment:
            - "config_cw_agent"
            - "restart_cw_agent"
        install_software:
          packages:
            apt:
              unzip: []
          commands:
              04_install_software_awscli_download:
                command: curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /root/awscliv2.zip
              05_install_software_awscli_install:
                command: unzip -q /root/awscliv2.zip -d /root && sudo /root/aws/install
              06_install_software_awscli_cleanup:
                command: rm -fr /root/aws /root/awscliv2.zip
        setup_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SimpleEC2Instance.Metadata.AWS::CloudFormation::Init.config_cw_agent
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource SimpleEC2Instance --region ${AWS::Region} --configsets cw_agent_update_environment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/etc/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01_enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02_start_cfn_hup:
              command: systemctl start cfn-hup.service
        config_cw_agent:
          files:
            "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json":
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "region": "us-west-1",
                    "run_as_user": "root"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/falco.log",
                            "log_group_name": "falco-logs",
                            "log_stream_name": "falco-logs-wednesday-test"
                          },
                          {
                            "file_path": "/var/log/syslog",
                            "log_group_name": "system-logs",
                            "log_stream_name": "simple-stack-wednesday-test"
                          }
                        ]
                      }
                    }
                  }
                }
        restart_cw_agent:
          commands:
            01_enable_cfn_hup:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_cfn_hup:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        install_falco:
          commands:
            01_install_falco_get_apt_key:
              command: curl -s https://falco.org/repo/falcosecurity-3672BA8F.asc | apt-key add -
            02_install_falco_add_apt:
              command: echo "deb https://dl.bintray.com/falcosecurity/deb stable main" | tee -a /etc/apt/sources.list.d/falcosecurity.list
            03_install_falco_apt_update:
              command: sudo apt-get update -y
            04_install_falco_install_kernel_headers:
              command: sudo apt-get -y install linux-headers-$(uname -r)
            05_install_falco_install_falco:
              command: sudo apt-get install -y falco
        configure_falco:
          files:
            /opt/falco/falco.yaml:
              content: |
                # configuration options for falco daemon
                # put this file in /etc/falco/falco.yaml
                # https://falco.org/docs/configuration/
                rules_file:
                - /etc/falco/falco_rules.yaml
                - /etc/falco/falco_rules.local.yaml
                time_format_iso_8601: true
                # options for falco internal logs:
                json_output: true
                log_syslog: true
                log_stderr: true
                # options for falco events
                syslog_output:
                  enabled: true
                file_output:
                  enabled: true
                  keep_alive: true
                  filename: /var/log/falco.log
                webserver:
                  enabled: false
            /opt/falco/falco_rules.local.yaml:
              content: |
                # basic rule set for a falco agent
                # put this file in /etc/falco/falco_rules.local.yaml

                # check for write operations to directories containing system binaries
                - macro: open_write
                  condition: >
                    (evt.type=open or evt.type=openat) and
                    fd.typechar='f' and
                    (evt.arg.flags contains O_WRONLY or
                    evt.arg.flags contains O_RDWR or
                    evt.arg.flags contains O_CREAT or
                    evt.arg.flags contains O_TRUNC)

                # note: package_mgmt_binaries is defined in default falco_rules.yaml, but is problematic
                - macro: my_package_mgmt_binaries
                  condition: proc.name in (dpkg, dpkg-preconfigu, rpm, rpmkey, yum)

                - macro: bin_dir
                  condition: fd.directory in (/bin, /sbin, /usr/bin, /usr/sbin)

                - rule: write_binary_dir
                  desc: an attempt to write to any file below a set of binary directories
                  condition: evt.dir = < and open_write and not my_package_mgmt_binaries and bin_dir
                  output: "File below a known binary directory opened for writing (user=%user.name command=%proc.cmdline file=%fd.name)"
                  priority: WARNING
          commands:
            01_configure_falco_mkdir:
              command: mkdir -p /opt/falco/
            02_configure_falco_install_config_file:
              command: cp /opt/falco/falco.yaml /etc/falco/falco.yaml
            03_configure_falco_install_rules_file:
              command: cp /opt/falco/falco_rules.local.yaml /etc/falco/falco_rules.local.yaml
            04_configure_falco_touch_log:
              command: touch /var/log/falco.log && chown syslog:adm /var/log/falco.log
        start_falco:
          commands:
            01_start_falco_enable:
              command: sudo systemctl enable falco
            01_start_falco_start:
              command: sudo systemctl start falco
        restart_cw_after_falco:
          commands:
            01_restart_cw:
              command: sudo systemctl restart amazon-cloudwatch-agent

  FalcoRestartSSMCommandDoc:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: "Reload the Falco configuration and restart the Falco engine without killing the PID."
        mainSteps:
        - action: "aws:runShellScript"
          name: "reloadfalco"
          inputs:
            runCommand:
              - "kill -1 $(cat /var/run/falco.pid)"
      DocumentType: Command
      Name: Falco-Agent-Restart

  FalcoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "falco-logs"
  FalcoLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FalcoLogGroup
      LogStreamName: "falco-logs-thursday-test"

  SysLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "system-logs"
  SysLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref SysLogGroup
      LogStreamName: "simple-stack-thursday-test"
